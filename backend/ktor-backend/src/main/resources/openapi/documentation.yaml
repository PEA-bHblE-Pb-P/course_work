openapi: "3.0.3"
info:
  title: "ktor_backend API"
  description: "ktor_backend API"
  version: "1.0.0"
servers:
- url: "http://lolcalhost:8080"
paths:
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
  /group:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupResponse"
  /group/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupResponse"
  /location_type/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationTypeResponse"
  /login/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
  /logout:
    get:
      description: ""
  /people_nearby:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
  /ping:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "pong!"
components:
  schemas:
    Map:
      type: "object"
      properties: {}
    GroupResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        locationId:
          type: "integer"
          format: "int32"
        adminId:
          type: "integer"
          format: "int32"
    LocationTypeResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        type:
          type: "string"