openapi: "3.0.3"
info:
  title: "ktor_backend API"
  description: "ktor_backend API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /character/{char_id}/kill:
    post:
      description: ""
      parameters:
      - name: "char_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "description"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /character/all:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CharacterResponse"
  /character/me:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CharacterResponse"
  /character/nearby:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PeopleNearbyResponse"
  /drink_blood:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /group:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupResponse"
  /group/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupResponse"
  /hunter_go_to_for_fight/{location_id}:
    post:
      description: ""
      parameters:
      - name: "location_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /location/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationResponse"
  /location/{location_id}/go:
    post:
      description: ""
      parameters:
      - name: "location_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Unit"
  /location/{location_name}/go_by_name:
    post:
      description: ""
      parameters:
      - name: "location_name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Unit"
  /location_type/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationTypeResponse"
  /login/{id}:
    post:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /logout:
    post:
      description: ""
  /ping:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "pong!"
components:
  schemas:
    Object:
      type: "object"
      properties: {}
    Serializable:
      type: "object"
      properties: {}
    CharacterResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        sex:
          type: "string"
        typeId:
          type: "integer"
          format: "int32"
        history:
          type: "string"
        birthday:
          type: "string"
        location:
          type: "integer"
          format: "int32"
        photoUrl:
          type: "string"
    PeopleNearbyResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        sex:
          type: "string"
        typeId:
          type: "integer"
          format: "int32"
    GroupResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        locationId:
          type: "integer"
          format: "int32"
        adminId:
          type: "integer"
          format: "int32"
    LocationResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        lat:
          type: "number"
          format: "float"
        lon:
          type: "number"
          format: "float"
        name:
          type: "string"
        locationTypeId:
          type: "integer"
          format: "int32"
    Unit:
      type: "object"
      properties: {}
    LocationTypeResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        type:
          type: "string"